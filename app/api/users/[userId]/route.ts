import { NextResponse } from "next/server";
import { server } from "@passwordless-id/webauthn";
import prismadb from "@/lib/prismadb";

export async function PATCH(
  req: Request,
  { params }: { params: { userId: number } }
) {
  try {
    const body = await req.json();
    const {
      username,
      email,
      firstname,
      lastname,
      phone,
      matno,
      address,
      department,
      yearofstudy,
      registration,
      challenge,
    } = body;

    // checking if user is avalable
    if (!params.userId) {
      new NextResponse("Unauthorized", { status: 401 });
    }

    const expected = {
      challenge: challenge, // whatever was randomly generated by the server
      origin:
        process.env.NODE_ENV !== "production"
          ? "http://localhost:3000"
          : "https://biometric-app.vercel.app",
    };

    const registrationParsed = await server.verifyRegistration(
      registration,
      expected
    );

    const user = await prismadb.user.update({
      where: { id: params.userId },
      data: {
        username,
        email,
        firstname,
        lastname,
        phone,
        matno,
        address,
        department,
        yearofstudy,
        credentials: {
          create: [
            {
              user_id: registrationParsed.credential.id,
              publicKey: registrationParsed.credential.publicKey,
              algorithm: registrationParsed.credential.algorithm,
            },
          ],
        },
      },
      include: {
        credentials: true,
      },
    });
    return NextResponse.json({
      success: true,
      data: user,
    });
  } catch (error) {
    console.log("[User_Patch]", error);
    return new NextResponse("Internal error", { status: 500 });
  }
}

export async function DELETE(
  req: Request,
  { params }: { params: { userId: number } }
) {
  try {
    // checking if user is avalable
    if (!params.userId) {
      new NextResponse("Unauthorized", { status: 401 });
    }

    const user = await prismadb.user.delete({
      where: { id: params.userId },
    });
    return NextResponse.json({
      success: true,
      data: user,
    });
  } catch (error) {
    console.log("[User_Delete]", error);
    return new NextResponse("Internal error", { status: 500 });
  }
}

export async function GET(
  req: Request,
  { params }: { params: { userId: number } }
) {
  try {
    // checking if user is avalable
    if (!params.userId) {
      return new NextResponse("Unauthorized", { status: 401 });
    }
    const user = await prismadb.user.findUnique({
      where: { id: params.userId },
    });
    return NextResponse.json({
      success: true,
      data: user,
    });
  } catch (error) {
    console.log("[User_Get_Single]", error);
    return new NextResponse("Internal error", { status: 500 });
  }
}
