import { NextResponse } from "next/server";
import { server } from "@passwordless-id/webauthn";
import prismadb from "@/lib/prismadb";

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { registration, challenge, username, fname, lname, phone, email, address, state, city, lga, mat, department, yearOfStudy, yearOfGraduation, faceUpload } = body;

    console.log(registration, challenge);

    const existingUser = await prismadb.user.findUnique({
      where: {
        username: username,
      },
    });

    if (existingUser) {
      throw new Error("Username already exists");
    }

    const expected = {
      challenge: challenge, // whatever was randomly generated by the server
      origin:
        process.env.NODE_ENV !== "production"
          ? "http://localhost:3000"
          : "https://biometric-app.vercel.app",
    };

    const registrationParsed = await server.verifyRegistration(
      registration,
      expected
    );

    const createUser = await prismadb.user.create({
      data: {
        username: username,
        email: email,
        firstname: fname,
        lastname: lname,
        phone: phone,
        state: state,
        city: city,
        lga: lga,
        matno: mat,
        address: address,
        department: department,
        yearofstudy: yearOfStudy,
        yearofgraduation: yearOfGraduation,
        faceUpload: faceUpload,
        credentials: {
          create: [
            {
              user_id: registrationParsed.credential.id,
              publicKey: registrationParsed.credential.publicKey,
              algorithm: registrationParsed.credential.algorithm,
            },
          ],
        },
      },
      include: {
        credentials: true,
      },
    });

    return NextResponse.json({
      success: true,
      data: createUser,
    });

    // return NextResponse.json({
    //   registrationParsed,
    // });
  } catch (error) {
    console.log("Server Registration: ", error);
    return new NextResponse("Internal error", { status: 500 });
  }
}
